@page "/users"
@using SmartWorkout.DataAccess
@using SmartWorkout.DataAccess.Entities
@using SmartWorkout.DataAccess.Repositories
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject IGenericRepo<User> repo
@inject IGenericRepo<Trainer> trainerRepo


<head>
    <link rel="stylesheet" href="./app.css" />

</head>
<PageTitle>Users</PageTitle>

@if (trainers != null)
{

    //make me a drop down menu with trainers.Name and save the selected trainer.id
    <select @onchange="OnTrainerChanged" class="form-select">
        <option disabled selected="selected">
            Select a trainer ...
        </option>
        @foreach (var trainer in trainers)
        {
            <option value="@trainer.Id">@trainer.Name @trainer.Surname</option>
        }
    </select>

}

<h1 class="mt-4">Users</h1>

<p class="mt-4">This is a list of all the users</p>

@if (deleted == true){
    <label> Succesfully deleted user @deletedUser?.Name @deletedUser?.Surname</label>
}
@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-borderless">
        <thead class="table-dark">
            <tr >
                <th align-middle>Id</th>
                <th>Name</th>
                <th>Surname</th>
                <th>Email</th>
                <th >Phone</th>
                <th>Weight</th>
                <th>Age</th>
                <th>Gender</th>
                <th>Edit</th>
                <th>Delete</th>
                <th>See workouts</th>
            </tr>
        </thead>
        <tbody>
            @foreach (User u in users)
            {
                <tr class="align-middle">
                    <td class="align-middle">@u.Id</td>
                    <td class="align-middle">@u.Name</td>
                    <td class="align-middle">@u.Surname</td>
                    <td class="align-middle">@(u.Email ?? "No email")</td>
                    <td>@(u.Phone ?? "No phone number provided")</td>
                    <td>@(!string.IsNullOrEmpty(u.Weight.ToString()) ? u.Weight : "unknown")</td>
                    <td>@(!string.IsNullOrEmpty(u.Age.ToString()) ? u.Age : "unknown")</td>
                    <td>@u.Gender.Name</td>
                    <td>
                        <button class="btn" style="color:blue !important;">
                            <a href="@($"/edit/{u.Id}")">
                                <i class="bi bi-person-fill-up"></i>
                            </a>
                        </button>
                        
                    </td>
                    <td>
                        <button @onclick="@(() => deleteUser(u))" class = "btn">
                            <i class="bi bi-person-fill-dash"></i>
                        </button>
                     </td>
                     <td>
                        <a class="btn btn-primary" stype="" href="@($"/workout/{u.Id}")">
                                <i class="bi bi-person-fill-up"></i>
                            </a>
                     </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // private IGenericRepo<User> repo;
    private int selectedTrainerId;

    private List<User> users;
    private List<User> usersAll;
    private bool deleted;
    private User? deletedUser;
    private Trainer[]? trainers;


    protected override async Task OnInitializedAsync()
    {

        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        ICollection<User> col = await repo.GetAllAsync();
        usersAll = col.ToList();
        users = new List<User>(usersAll);
        ICollection<Trainer> colTrainers = await trainerRepo.GetAllAsync();
        trainers = colTrainers.ToArray();

    }
    protected async Task deleteUser( User u)
    {
        await repo.DeleteAsync(u.Id);
        deleted = true;
        deletedUser = u;
        users.Remove(u);
    }
    protected async Task OnTrainerChanged(ChangeEventArgs e)
    {
        selectedTrainerId = Int32.Parse(e.Value.ToString());
        Console.WriteLine(selectedTrainerId);
        Trainer? t = await trainerRepo.GetByIdAsync(selectedTrainerId);
        users = usersAll.Where(u => u.Trainers.Contains(t)).ToList(); 

    }


}
