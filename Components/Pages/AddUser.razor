@page "/addUser"
@using SmartWorkout.DataAccess
@using SmartWorkout.DataAccess.Entities
@using SmartWorkout.DataAccess.Repositories
@using System.ComponentModel.DataAnnotations
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IGenericRepo<User> userRepo

<div class="add-user-container">
    <div class="form-container">
        <div class="decorative-img">
            <img class="image" src="./workout.png" />
        </div>
        <div class="form">
            <EditForm Model="Model" OnValidSubmit="FormSubmitted" FormName="AddUser">
                <DataAnnotationsValidator/>
                <div class="title">Add a user</div>
                @if (Submitted)
                {
                    <div class="subtitle">
                        <label> Sucessfully inserted client</label>
                        <label> @(Model?.Surname ?? "No data")</label>
                        <label> @Model?.Name</label>
                    </div>
                }
                else
                {
                    <label class="subtitle"> Enter your values</label>

                }
    
                <div class="input-container ic1">
                    <label class="input-label" for="Surname">Surname</label>
                    <InputText @bind-Value="Model!.Surname"></InputText>
                    <ValidationMessage For="(() => Model.Surname)"></ValidationMessage>

                </div>
                <div class="input-container ic2">
                    <label class="input-label">Name</label>
                    <InputText id="Name" @bind-Value="Model!.Name"></InputText>
                    <ValidationMessage For="(() => Model.Name)"></ValidationMessage>
                </div>

                <div class="input-container ic2">
                    <label class="input-label">Email</label>
                    <InputText id="Email" @bind-Value="Model.Email"></InputText>
                    <ValidationMessage For="(() => Model.Email)"></ValidationMessage>
                </div>
    
                <div class="input-container ic2">
                    <label class="input-label">Phone</label>
                    <InputText id="Phone" @bind-Value="Model.Phone"></InputText>
                    <ValidationMessage For="(() => Model.Phone)"></ValidationMessage>
                </div>
    
                <div class="input-container ic2">
                    <label class="input-label">Weight</label>
                    <InputNumber id="Weight" @bind-Value="Model.Weight"></InputNumber>
                    <ValidationMessage For="(() => Model.Weight)"></ValidationMessage>

                </div>
    
                <div class="input-container ic2">
                    <label class="input-label">Age</label>
                    <InputNumber id="Age" @bind-Value="Model.Age"></InputNumber>
                    <ValidationMessage For="(() => Model.Age)"></ValidationMessage>

                </div>

                <div class="input-container ic2">
                    <label class ="input-label">Select gender</label>
                    <InputSelect @bind-Value="Model.GenderId">
                        <option value="">
                            Select your gender ...
                        </option>
                        <option value=1>
                            Female
                        </option>
                        <option value=2>
                            Male
                        </option>
                        <option value=3>
                            Other
                        </option>
                    </InputSelect>
                </div>
    
            <input type="submit" value="Submit" class="submit" />
        </EditForm>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    protected UserM? Model { get; set; }
    public bool Submitted = false;

    protected override void OnInitialized() => Model ??= new();

    private async Task FormSubmitted()
    {
        User u = new User()
            {
                Name = Model?.Name,
                Surname = Model?.Surname,
                Email = Model?.Email,
                Phone = Model?.Phone,
                Age = Model?.Age,
                GenderId = Model?.GenderId==null ? 3 : Model.GenderId ,
                Weight = Model?.Weight,
            };
        try
        {
            await userRepo.InsertAsync(u);
            Submitted = true;
        }catch(Exception e)
        {
            Console.WriteLine("Could not add " + e);
        }
        

    }

    public class UserM
    {
        //[DeniedValues(null)]
        [Required()]
        public string? Name { get;
            set; }
        [RegularExpression(@"^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$", ErrorMessage = "Email should be in format (user@email.com)")]
        public string? Email { get; 
            set; }

        [Required(AllowEmptyStrings = false)]
        [MinLength(1)]
        public string? Surname { get; set; }
        [RegularExpression(@"^(\+4|)?(07[0-8]{1}[0-9]{1}|02[0-9]{2}|03[0-9]{2}){1}?(\s|\.|\-)?([0-9]{3}(\s|\.|\-|)){2}$", ErrorMessage = "Phone number should be in format 07xxxxxxxx")]
        public string? Phone { get; set; }

        [Range(1, 200, ErrorMessage = "Only positive number allowed")]
        public double? Weight { get; set; }

        [Range(1, 200, ErrorMessage = "Only positive number allowed")]
        public int? Age { get; set; }

        public int GenderId { get; set; }
    }

}
